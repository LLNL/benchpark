ramble:
  env_vars:
    set:
      OMP_NUM_THREADS: '{n_threads}'
  variables:
    mpi_command: mpirun -n {n_ranks} -ppn {processes_per_node}
    batch_submit: '{execute_experiment}'

    cpu_vendor: ['Intel', 'AMD']

    gcc_version: [8.5.0, 9.5.0, 10.5.0, 11.4.0, 12.3.0, 13.2.0]

    # Platform Definitions
    long_target:        [ivybridge,  haswell, broadwell,  skylake, skylake_avx512, cascadelake,  icelake, sapphirerapids,      zen,     zen2,     zen3,     zen4]
    short_target:       [      ivb,      hsw,       bdw,      skx,         skx512,         clx,      icx,            spr,      zen,     zen2,     zen3,     zen4]
    array_size:         [ 80000000, 80000000,  80000000, 80000000,       80000000,    80000000, 80000000,       80000000, 80000000, 80000000, 80000000, 80000000]
    processes_per_node: [       32,       32,        32,       32,             32,          30,       48,             88,       32,       32,       56,      180]
  zips:
    targets:
    - short_target
    - long_target
    - array_size
    - processes_per_node
  applications:
    hpl:
      workloads:
        calculator:
          experiments:
            '{cpu_vendor}-{short_target}-{gcc_version}-nb{block_size}':
              variables:
                n_nodes: 1
                env_name: hpl-gcc-{gcc_version}-{short_target}
                memory_per_node: '{array_size}'
                block_size: [240, 384, 480]
              matrix:
              - targets
              - gcc_version
              - cpu_vendor
              - block_size
              exclude:
                where: &unsupported_exclusions
                - "'{cpu_vendor}' == 'AMD' and ('{short_target}' in ['ivb', 'hsw', 'bdw', 'skx', 'skx512', 'clx', 'icx', 'spr'])"
                - "'{cpu_vendor}' == 'Intel' and ('{short_target}' in ['zen', 'zen2', 'zen3', 'zen4'])"
                - "'{short_target}' == 'spr' and ('{gcc_version}' in ['8.5.0', '9.5.0', '10.5.0', '11.4.0', '12.3.0'])"
                - "'{short_target}' == 'icx' and ('{gcc_version}' in ['8.5.0', '9.5.0', '10.5.0', '11.4.0'])"
                - "'{short_target}' == 'clx' and ('{gcc_version}' in ['8.5.0', '9.5.0', '10.5.0'])"
                - "'{short_target}' in ['skx', 'skx512'] and ('{gcc_version}' in ['8.5.0', '9.5.0'])"
                - "'{short_target}' == 'bdw' and ('{gcc_version}' in ['8.5.0'])"
                - "'{short_target}' == 'zen4' and ('{gcc_version}' in ['8.5.0', '9.5.0', '10.5.0', '11.4.0', '12.3.0'])"
                - "'{short_target}' == 'zen3' and ('{gcc_version}' in ['8.5.0', '9.5.0', '10.5.0', '11.4.0'])"
                - "'{short_target}' == 'zen2' and ('{gcc_version}' in ['8.5.0', '9.5.0', '10.5.0'])"
                - "'{short_target}' == 'zen' and ('{gcc_version}' in ['8.5.0', '9.5.0'])"
    streamc:
      workloads:
        streamc:
          experiments:
            '{cpu_vendor}-{short_target}-{gcc_version}':
              variables:
                n_nodes: 1
                env_name: hpl-gcc-{gcc_version}-{short_target}
              matrix:
              - targets
              - gcc_version
              - cpu_vendor
              exclude:
                where: *unsupported_exclusions
  spack:
    concretized: true
    packages:
      gcc-{gcc_version}-{short_target}:
        spack_spec: gcc@{gcc_version} target={long_target}
        matrix:
        - targets
        - gcc_version
      impi:
        spack_spec: intel-oneapi-mpi@2021.11.0
      hpl-gcc-{gcc_version}-{short_target}:
        spack_spec: hpl@2.3 +openmp target={long_target}
        compiler: gcc-{gcc_version}-{short_target}
        matrix:
        - targets
        - gcc_version
      streamc-gcc-{gcc_version}-{short_target}-{array_size}:
        spack_spec: stream@5.10 +openmp cflags="-O3 -DSTREAM_ARRAY_SIZE={array_size} -DNTIMES=20"
        compiler: gcc-{gcc_version}-{short_target}
        matrix:
        - targets
        - gcc_version
    environments:
      hpl-gcc-{gcc_version}-{short_target}:
        packages:
        - hpl-gcc-{gcc_version}-{short_target}
        - impi



### To run a subset, can do "ramble on --where "'{short_target}' in ['skx',zen3']"
