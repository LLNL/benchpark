#!/usr/bin/env python3

import os
from enum import Enum
from pathlib import Path

class AllocOpt(Enum):
    N_TASKS = 1
    N_NODES = 2
    GPUS_PER_NODE = 3
    N_CORES_PER_TASK = 4
    N_OMP_THREADS_PER_TASK = 5
    N_TASKS_PER_NODE = 6

def defined_allocation_options():
    """For each possible allocation option, check if it was filled in by
       Ramble: in that case it will be an integer; if not, it will remain
       a string with "{}".
    """
    defined = {}
    for alloc_opt in AllocOpt:
        env_def = os.environ[alloc_opt.name]
        try:
            int_val = int(env_def)
        except ValueError:
            continue
        defined[alloc_opt] = env_def
    return defined

def sbatch_directives(opts):
    # TODO: this is incomplete, it is intended that this would be able to
    # accommodate the possibility that N_NODES is unset, and we could calculate
    # N_NODES from N_GPUS and GPUS_PER_NODE, for example
    n_nodes = opts[AllocOpt.N_NODES]

    directives = [
        f"#SBATCH -N {n_nodes}"
    ]
    return directives

def openmp_settings(opts):
    if AllocOpt.N_OMP_THREADS_PER_TASK in opts:
        return [f"export OMP_NUM_THREADS={opts[AllocOpt.N_OMP_THREADS_PER_TASK]}"]
    else:
        return []

def main():
    experiment_run_dir = os.environ["EXPERIMENT_RUN_DIR"]
    setup_and_run = os.environ["SETUP_AND_RUN"]

    allocation_options = defined_allocation_options()

    scheduler = os.environ["SCHEDULER"]

    with open(setup_and_run, "r") as f:
        commands = list(x.strip() for x in f.readlines())

    output_script = Path(experiment_run_dir) / "generated.sh"

    original_run_command = commands[-1]
    original_run_args = list(original_run_command.split())

    # TODO: incomplete - Ramble wants to generate the mpirun command, but I
    # want to do that myself in this script (e.g. to set allocation options for
    # srun). This logic could pull it apart and put it back together with the
    # options I want to set. Depending on the system this could be an srun,
    # flux run, or mpirun
    app_runner_opts = [
        "-n", allocation_options[AllocOpt.N_TASKS]
    ]
    new_run_args = [original_run_args[0]] + app_runner_opts  + original_run_args[1:]
    # TODO: Don't actually run anything for now (prepend "#" to make it a comment)
    new_run_command = "#" + " ".join(new_run_args)

    batch_directives = []
    invoke_with = "bash"
    if scheduler == "slurm":
        invoke_with = "sbatch"
        batch_directives = sbatch_directives(allocation_options)
    header_comments = [
        f"#Expanded variables: {str(allocation_options)}",
    ]
    new_commands = (
        batch_directives + header_comments + commands[:-1]
        + openmp_settings(allocation_options) + [new_run_command]
    )

    with open(output_script, "w") as f:
        f.write("\n".join(new_commands))

    print(f"{invoke_with} {output_script}")

if __name__ == "__main__":
    main()
