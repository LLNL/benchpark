#!/usr/bin/env python3

import argparse
import subprocess
import pathlib
import os
import shutil

DEBUG = True

def debug_print(message):
    if DEBUG:
        print("(debug) " + str(message))

def main():
    parser = argparse.ArgumentParser(description="Benchpark")

    subparsers = parser.add_subparsers(title="Subcommands", dest="subcommand")

    actions = {}
    benchpark_list(subparsers, actions)
    benchpark_create(subparsers, actions)

    args = parser.parse_args()

    if not args.subcommand:
        print("Must specify subcommand: " + " ".join(actions.keys()))
    elif args.subcommand in actions:
        actions[args.subcommand](args)
    else:
        print("Invalid subcommand ({args.subcommand}) - must choose one of: " +  " ".join(actions.keys()))

def benchpark_list(subparsers, actions_dict):
    list_parser = subparsers.add_parser("list", help="List available benchmarks and systems")

    actions_dict["list"] = benchpark_list_handler

def benchpark_list_handler(args):
    pass

def benchpark_create(subparsers, actions_dict):
    create_parser = subparsers.add_parser("create", help="Create a benchmark and prepare it to build/run")

    create_parser.add_argument('benchmark', type=str, help="The benchmark to run")
    create_parser.add_argument('system', type=str, help="The system we are on")
    create_parser.add_argument('workspace_root', type=str, help="Where to install packages, store results, etc. (should be empty/nonexistent)")

    actions_dict["create"] = benchpark_create_handler

def run_command(command_str):
    subprocess.run(command_str, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

def benchpark_create_handler(args):
    benchmark = args.benchmark
    system = args.system
    workspace_root = pathlib.Path(os.path.abspath(args.workspace_root))

    script_location = os.path.dirname(os.path.abspath(__file__))
    source_dir = pathlib.Path(script_location).parent

    workspace_dir = workspace_root / str(benchmark) / str(system)

    if workspace_dir.exists() and workspace_dir.is_dir():
        shutil.rmtree(workspace_dir)

    workspace_dir.mkdir(parents=True)

    configs_dir = workspace_dir / "configs"

    debug_print(source_dir)
    configs_src_dir = source_dir / "configs" /  str(system)

    os.symlink(configs_src_dir, configs_dir)

    return

    run_command(
        "git clone --depth=1 -c feature.manyFiles=true "
        "https://github.com/spack/spack.git "
        "${TEST_WORKING_DIR}/spack"
    )

    run_command(
        "git clone --depth=1 -c feature.manyFiles=true "
        "https://github.com/GoogleCloudPlatform/ramble.git "
        "${TEST_WORKING_DIR}/ramble"
    )

if __name__ == "__main__":
    main()
