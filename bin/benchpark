#!/usr/bin/env python3
#
# Copyright 2023 Lawrence Livermore National Security, LLC and other
# Benchpark Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: Apache-2.0

import argparse
import os
import pathlib
import shlex
import shutil
import subprocess
import sys
import tempfile

DEBUG = False

__version__ = "0.1.0"


system_definition_template = """\
# Copyright 2023 Lawrence Livermore National Security, LLC and other
# Benchpark Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: Apache-2.0
# ----------------------------------------------------------------------------
# If you submit this system configuration back to Benchpark as a pull request,
# please first remove this boilerplate and all FIXME comments.
#
# This is a template system configuration file for Benchpark. We've put "FIXME"
# next to all the things you'll want to change. If not applicable, the fields
# can be left blank.
#
# See the Benchpark documentation for more information on adding system
# configurations.
# ----------------------------------------------------------------------------
system_definition:
  name: {system_name}
  # FIXME: Add vendor and name of system integrator.
  integrator:
    vendor:
    name:
  # FIXME: Add vendor, name, ISA, and microarchitecture of system CPU.
  processor:
    vendor:
    name:
    ISA:
    uArch:
  # FIXME: Add vendor, name, ISA, and microarchitecture of system accelerator.
  accelerator:
    vendor:
    name:
    ISA:
    uArch:
  # FIXME: Add vendor and name of system interconnect.
  interconnect:
    vendor:
    name:
  # FIXME: Add site, name, installation year, and description of systems tested
  # with this description in Benchpark.
  system-tested:
    site:
    name:
    installation-year:
    description:
  # FIXME: Add Top500 system(s) name and site.
  top500-system-instances:
    -
"""


def debug_print(message):
    if DEBUG:
        print("(debug) " + str(message))


def main():
    if sys.version_info[:2] < (3, 8):
        raise Exception("Benchpark requires at least python 3.8+.")

    parser = argparse.ArgumentParser(description="Benchpark")
    parser.add_argument(
        "-V", "--version", action="store_true", help="show version number and exit"
    )

    subparsers = parser.add_subparsers(title="Subcommands", dest="subcommand")

    actions = {}
    benchpark_list(subparsers, actions)
    benchpark_setup(subparsers, actions)

    args = parser.parse_args()
    no_args = True if len(sys.argv) == 1 else False

    if no_args:
        parser.print_help()
        return 1

    if args.version:
        print(get_version())
        return 0

    if args.subcommand in actions:
        actions[args.subcommand](args)
    else:
        print(
            "Invalid subcommand ({args.subcommand}) - must choose one of: "
            + " ".join(actions.keys())
        )


def get_version():
    benchpark_version = __version__

    return benchpark_version


def source_location():
    script_location = os.path.dirname(os.path.abspath(__file__))
    return pathlib.Path(script_location).parent


def benchpark_list(subparsers, actions_dict):
    list_parser = subparsers.add_parser(
        "list", help="List available benchmarks and systems"
    )
    list_parser.add_argument("sublist", nargs="?")
    actions_dict["list"] = benchpark_list_handler


def benchpark_benchmarks():
    source_dir = source_location()
    benchmarks = []
    experiments_dir = source_dir / "experiments"
    for x in os.listdir(experiments_dir):
        for y in os.listdir(experiments_dir / x):
            benchmarks.append(f"{x}/{y}")
    return benchmarks


def benchpark_systems():
    source_dir = source_location()
    systems = []
    for x in os.listdir(source_dir / "configs"):
        systems.append(x)
    return systems


def benchpark_list_handler(args):
    source_dir = source_location()
    sublist = args.sublist
    benchmarks = benchpark_benchmarks()
    systems = benchpark_systems()

    if sublist == None:
        print("Benchmarks/ProgrammingModel:")
        for benchmark in benchmarks:
            print(f"\t{benchmark}")
        print("Systems:")
        for system in systems:
            print(f"\t{system}")
    else:
        if sublist == "benchmarks":
            print("Benchmarks:")
            for benchmark in benchmarks:
                print(f"\t{benchmark}")
        else:
            if sublist == "systems":
                print("Systems:")
                for system in systems:
                    print(f"\t{system}")
            else:
                raise ValueError(
                    f'Invalid benchpark list "{sublist}" - must choose [benchmarks], [systems], or leave empty'
                )


def benchpark_check_benchmark(arg_str):
    benchmarks = benchpark_benchmarks()
    found = arg_str in benchmarks
    if not found:
        out_str = f'Invalid benchmark/experiment "{arg_str}" - must choose one of: '
        for benchmark in benchmarks:
            out_str += f"\n\t{benchmark}"
        raise ValueError(out_str)
    return found


def benchpark_check_system(arg_str):
    systems = benchpark_systems()
    found = arg_str in systems
    if not found:
        out_str = f'Invalid system "{arg_str}" - must choose one of: '
        for system in systems:
            out_str += f"\n\t{system}"
        raise ValueError(out_str)
    return found


def benchpark_setup(subparsers, actions_dict):
    create_parser = subparsers.add_parser(
        "setup", help="Set up an experiment and prepare it to build/run"
    )

    create_parser.add_argument(
        "benchmark", type=str, help="The experiment (benchmark/ProgrammingModel) to run"
    )
    create_parser.add_argument(
        "system", type=str, help="The system on which to run the experiment"
    )
    create_parser.add_argument(
        "experiments_root",
        type=str,
        help="Where to install packages and store results for the experiments. Benchpark expects to manage this directory, and it should be empty/nonexistent the first time you run benchpark setup experiments.",
    )

    system_create_parser = subparsers.add_parser(
        "system-create", help="Initialize a system config"
    )
    system_create_parser.add_argument(
        "--template",
        action="append",
        help="Choose common config settings in templates/",
    )
    system_create_parser.add_argument(
        "--from", dest="use_existing", type=str, help="Copy an existing system config"
    )
    system_create_parser.add_argument("name", type=str, help="Name of the new system")

    actions_dict["setup"] = benchpark_setup_handler
    actions_dict["system-create"] = benchpark_system_create_handler


def run_command(command_str, env=None):
    subprocess.run(
        shlex.split(command_str),
        env=env,
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
    )


# Note: it would be nice to vendor spack.llnl.util.link_tree, but that
# involves pulling in most of llnl/util/ and spack/util/
def symlink_tree(src, dst):
    """Like ``cp -R`` but instead of files, create symlinks"""
    src = os.path.abspath(src)
    dst = os.path.abspath(dst)
    for x in [src, dst]:
        if not os.path.isdir(x):
            raise ValueError(f"Not a directory: {x}")
    for src_subdir, directories, files in os.walk(src):
        relative_src_dir = pathlib.Path(os.path.relpath(src_subdir, src))
        dst_dir = pathlib.Path(dst) / relative_src_dir
        dst_dir.mkdir(parents=True, exist_ok=True)
        for x in files:
            dst_symlink = dst_dir / x
            src_file = os.path.join(src_subdir, x)
            os.symlink(src_file, dst_symlink)


def copy_dir_contents(srcdir, dstdir, merge_resolver=None):
    """
    Given srcdir/{a, b, c} and dstdir/ (which already exists), copy {a, b, c}
    into dstdir so it looks like dstdir/{a, b, c}.

    Skip copying symlinks.
    """
    srcdir = pathlib.Path(srcdir)
    dstdir = pathlib.Path(dstdir)
    for entry in srcdir.iterdir():
        if entry.is_dir():
            shutil.copytree(entry, dstdir / entry.name)
        elif not entry.is_symlink():
            dst_path = dstdir / entry.name
            if dst_path.exists() and merge_resolver:
                merge_resolver(entry, dst_path)
            else:
                shutil.copy2(entry, dst_path)


class BenchparkInstallation:
    def __init__(self, root):
        self.root = pathlib.Path(root)

    @staticmethod
    def from_benchpark_main_script(script_path):
        script_path = pathlib.Path(script_path)
        return BenchparkInstallation(script_path.parent.parent)

    @staticmethod
    def install_ramble_to(location):
        debug_print(f"Cloning ramble to {location}")
        run_command(
            "git clone --depth=1 -c feature.manyFiles=true "
            "https://github.com/GoogleCloudPlatform/ramble.git "
            f"{location}"
        )
        debug_print(f"Done cloning ramble ({location})")

    def ramble(self):
        ramble_lib_location = self.root / "lib" / "ramble"
        if not ramble_lib_location.exists():
            BenchparkInstallation.install_ramble_to(ramble_lib_location)
        return ramble_lib_location / "bin" / "ramble"


class RambleConfigMergeResolver:
    def __init__(self, benchpark_installation):
        self.benchpark_installation = benchpark_installation
        self.script = benchpark_installation.root / "lib" / "scripts" / "merge.py"
        self.ramble = None

    def prepare(self):
        self.ramble = self.benchpark_installation.ramble()

    def __call__(self, path1, path2):
        """Merge config from path1 into path2"""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_dir = pathlib.Path(temp_dir)

            merged_config = temp_dir / pathlib.Path(path2).name

            run_command(
                f"{self.ramble} python {self.script} {path1} {path2} {merged_config}"
            )

            debug_print(f"Overwrite {path2} with merged yaml from {merged_config}")
            # Overwrite the destination path with the merged result
            shutil.copy2(merged_config, path2)


def benchpark_system_create_handler(args):
    system_config_name = args.name

    script_path = pathlib.Path(os.path.abspath(__file__))
    benchpark_installation = BenchparkInstallation.from_benchpark_main_script(
        script_path
    )
    config_dir = benchpark_installation.root / "configs"

    new_config_dir = config_dir / system_config_name

    if new_config_dir.exists():
        raise Exception(f"{new_config_dir} already exists")

    cfg_merge_resolver = RambleConfigMergeResolver(benchpark_installation)
    cfg_merge_resolver.prepare()

    try:
        new_config_dir.mkdir()

        if args.use_existing:
            src_config_dir = config_dir / args.use_existing
            if not src_config_dir.exists():
                raise Exception(
                    f"Specified --from={src_config_dir}, but that does not exist"
                )
            copy_dir_contents(src_config_dir, new_config_dir)
        if args.template:
            templates = list(pathlib.Path(x) for x in args.template)

            for template_dir in templates:
                copy_dir_contents(
                    template_dir, new_config_dir, merge_resolver=cfg_merge_resolver
                )

        # Write the new system definition file
        system_defn_path = new_config_dir / "system_definition.yaml"
        write_system_definition(system_defn_path, system_config_name)
        debug_print(f"Created system definition file: {system_defn_path}")
    except:
        shutil.rmtree(new_config_dir)
        raise


def write_system_definition(system_definition_path, sys_name):
    """Writes the new system definition file."""

    # Write out a template for the file
    with open(system_definition_path, "w") as system_definition_file:
        system_definition_file.write(
            system_definition_template.format(system_name=sys_name)
        )


def benchpark_setup_handler(args):
    """
    experiments_root/
        spack/
        ramble/
        <benchmark>/
            <system>/
                workspace/
                    configs/
                        (everything from source/configs/<system>)
                        (everything from source/experiments/<benchmark>)
    """

    benchmark = args.benchmark
    system = args.system
    experiments_root = pathlib.Path(os.path.abspath(args.experiments_root))
    source_dir = source_location()
    debug_print(f"source_dir = {source_dir}")
    debug_print(f"specified benchmark/ProgrammingModel = {benchmark}")
    valid_benchmark = benchpark_check_benchmark(benchmark)
    debug_print(f"specified system = {system}")
    valid_system = benchpark_check_system(system)
    if not (valid_benchmark and valid_system):
        raise ValueError(
            "Invalid benchmark/experiment and system provided: {0} {1}".format(
                benchmark, system
            )
        )

    workspace_dir = experiments_root / str(benchmark) / str(system)

    if workspace_dir.exists():
        if workspace_dir.is_dir():
            print(f"Clearing existing workspace {workspace_dir}")
            shutil.rmtree(workspace_dir)
        else:
            print(
                f"Benchpark expects to manage {workspace_dir} as a directory, but it is not"
            )
            sys.exit(1)

    workspace_dir.mkdir(parents=True)

    ramble_workspace_dir = workspace_dir / "workspace"
    ramble_configs_dir = ramble_workspace_dir / "configs"

    print(f"Setting up configs for Ramble workspace {ramble_configs_dir}")

    configs_src_dir = source_dir / "configs" / str(system)
    experiment_src_dir = source_dir / "experiments" / benchmark

    ramble_configs_dir.mkdir(parents=True)
    symlink_tree(configs_src_dir, ramble_configs_dir)
    symlink_tree(experiment_src_dir, ramble_configs_dir)

    spack_location = experiments_root / "spack"
    ramble_location = experiments_root / "ramble"

    spack_exe = spack_location / "bin" / "spack"
    ramble_exe = ramble_location / "bin" / "ramble"
    spack_cache_location = spack_location / "misc-cache"

    initializer_script = experiments_root / "setup.sh"

    if not spack_location.exists():
        print(f"Cloning spack into {spack_location}")
        run_command(
            "git clone --depth=1 -c feature.manyFiles=true "
            "https://github.com/spack/spack.git "
            f"{spack_location}"
        )

        env = {"SPACK_DISABLE_LOCAL_CONFIG": "1"}
        run_command(
            f"{spack_exe} config --scope=site add config:misc_cache:{spack_cache_location}",
            env=env,
        )
        run_command(f"{spack_exe} repo add --scope=site {source_dir}/repo", env=env)

    if not ramble_location.exists():
        print(f"Cloning ramble into {ramble_location}")
        BenchparkInstallation.install_ramble_to(ramble_location)

        run_command(f"{ramble_exe} repo add --scope=site {source_dir}/repo")
        run_command(
            f'{ramble_exe} config --scope=site add "config:disable_progress_bar:true"'
        )
        run_command(
            f"{ramble_exe} config --scope=site add \"config:spack:global:args:'-d'\""
        )

    if not initializer_script.exists():
        with open(initializer_script, "w") as f:
            f.write(
                f"""\
if [ -n "${{_BENCHPARK_INITIALIZED:-}}" ]; then
    return 0
fi

. {spack_location}/share/spack/setup-env.sh
. {ramble_location}/share/ramble/setup-env.sh

export SPACK_DISABLE_LOCAL_CONFIG=1

export _BENCHPARK_INITIALIZED=true
"""
            )

    instructions = f"""\
To complete the benchpark setup, do the following:

    . {initializer_script}

Further steps are needed to build the experiments (ramble -P -D {ramble_workspace_dir} workspace setup) and run them (ramble -P -D {ramble_workspace_dir} on)
"""
    print(instructions)


if __name__ == "__main__":
    main()
