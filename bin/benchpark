#!/usr/bin/env python3

import argparse
import subprocess
import pathlib
import os
import shutil
import shlex
import sys

DEBUG = False


def debug_print(message):
    if DEBUG:
        print("(debug) " + str(message))


def main():
    if sys.version_info[:2] < (3, 8):
        raise Exception("Benchpark requires at least python 3.8+.")

    parser = argparse.ArgumentParser(description="Benchpark")

    subparsers = parser.add_subparsers(title="Subcommands", dest="subcommand")

    actions = {}
    benchpark_list(subparsers, actions)
    benchpark_setup(subparsers, actions)

    args = parser.parse_args()

    if not args.subcommand:
        print("Must specify subcommand: " + " ".join(actions.keys()))
    elif args.subcommand in actions:
        actions[args.subcommand](args)
    else:
        print(
            "Invalid subcommand ({args.subcommand}) - must choose one of: "
            + " ".join(actions.keys())
        )


def source_location():
    script_location = os.path.dirname(os.path.abspath(__file__))
    return pathlib.Path(script_location).parent


def benchpark_list(subparsers, actions_dict):
    list_parser = subparsers.add_parser(
        "list", help="List available benchmarks and systems"
    )
    list_parser.add_argument("sublist", nargs="?")
    actions_dict["list"] = benchpark_list_handler


def benchpark_benchmarks():
    source_dir = source_location()
    benchmarks = []
    experiments_dir = source_dir / "experiments"
    for x in os.listdir(experiments_dir):
        for y in os.listdir(experiments_dir / x):
            benchmarks.append(f"{x}/{y}")
    return benchmarks


def benchpark_systems():
    source_dir = source_location()
    systems = []
    for x in os.listdir(source_dir / "configs"):
        systems.append(x)
    return systems


def benchpark_list_handler(args):
    source_dir = source_location()
    sublist = args.sublist
    benchmarks = benchpark_benchmarks()
    systems = benchpark_systems()

    if sublist == None:
        print("Benchmarks/ProgrammingModel:")
        for benchmark in benchmarks:
            print(f"\t{benchmark}")
        print("Systems:")
        for system in systems:
            print(f"\t{system}")
    else:
        if sublist == "benchmarks":
            print("Benchmarks:")
            for benchmark in benchmarks:
                print(f"\t{benchmark}")
        else:
            if sublist == "systems":
                print("Systems:")
                for system in systems:
                    print(f"\t{system}")
            else:
                raise ValueError(
                    f'Invalid benchpark list "{sublist}" - must choose [benchmarks], [systems], or leave empty'
                )


def benchpark_check_benchmark(arg_str):
    benchmarks = benchpark_benchmarks()
    found = arg_str in benchmarks
    if not found:
        out_str = f'Invalid benchmark/experiment "{arg_str}" - must choose one of: '
        for benchmark in benchmarks:
            out_str += f"\n\t{benchmark}"
        raise ValueError(out_str)
    return found


def benchpark_check_system(arg_str):
    systems = benchpark_systems()
    found = arg_str in systems
    if not found:
        out_str = f'Invalid system "{arg_str}" - must choose one of: '
        for system in systems:
            out_str += f"\n\t{system}"
        raise ValueError(out_str)
    return found


def benchpark_setup(subparsers, actions_dict):
    create_parser = subparsers.add_parser(
        "setup", help="Create a benchmark and prepare it to build/run"
    )

    create_parser.add_argument(
        "benchmark", type=str, help="The benchmark/experiment to run"
    )
    create_parser.add_argument("system", type=str, help="The system we are on")
    create_parser.add_argument(
        "workspace_root",
        type=str,
        help="Where to install packages, store results, etc. (should be empty/nonexistent)",
    )

    actions_dict["setup"] = benchpark_setup_handler


def run_command(command_str, env=None):
    subprocess.run(
        shlex.split(command_str),
        env=env,
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
    )


# Note: it would be nice to vendor spack.llnl.util.link_tree, but that
# involves pulling in most of llnl/util/ and spack/util/
def symlink_tree(src, dst):
    """Like ``cp -R`` but instead of files, create symlinks"""
    src = os.path.abspath(src)
    dst = os.path.abspath(dst)
    for x in [src, dst]:
        if not os.path.isdir(x):
            raise ValueError(f"Not a directory: {x}")
    for src_subdir, directories, files in os.walk(src):
        relative_src_dir = pathlib.Path(os.path.relpath(src_subdir, src))
        dst_dir = pathlib.Path(dst) / relative_src_dir
        dst_dir.mkdir(parents=True, exist_ok=True)
        for x in files:
            dst_symlink = dst_dir / x
            src_file = os.path.join(src_subdir, x)
            os.symlink(src_file, dst_symlink)


def benchpark_setup_handler(args):
    """
    workspace_root/
        <benchmark>/
            <system>/
                workspace/
                    configs/
                        (everything from source/configs/<system>)
                        (everything from source/experiments/<benchmark>)
        spack/
        ramble/
    """

    benchmark = args.benchmark
    system = args.system
    workspace_root = pathlib.Path(os.path.abspath(args.workspace_root))
    source_dir = source_location()
    debug_print(f"source_dir = {source_dir}")
    debug_print(f"specified benchmark = {benchmark}")
    valid_benchmark = benchpark_check_benchmark(benchmark)
    debug_print(f"specified system = {system}")
    valid_system = benchpark_check_system(system)
    if not (valid_benchmark and valid_system):
        raise ValueError(
            "Invalid benchmark/experiment and system provided: {0} {1}".format(
                benchmark, system
            )
        )

    workspace_dir = workspace_root / str(benchmark) / str(system)

    if workspace_dir.exists():
        if workspace_dir.is_dir():
            print(f"Clearing existing workspace {workspace_dir}")
            shutil.rmtree(workspace_dir)
        else:
            print(
                f"Benchpark expects to manage {workspace_dir} as a directory, but it is not"
            )
            sys.exit(1)

    workspace_dir.mkdir(parents=True)

    ramble_workspace_dir = workspace_dir / "workspace"
    ramble_configs_dir = ramble_workspace_dir / "configs"

    print(f"Setting up configs for Ramble workspace {ramble_configs_dir}")

    configs_src_dir = source_dir / "configs" / str(system)
    experiment_src_dir = source_dir / "experiments" / benchmark

    ramble_configs_dir.mkdir(parents=True)
    symlink_tree(configs_src_dir, ramble_configs_dir)
    symlink_tree(experiment_src_dir, ramble_configs_dir)

    spack_location = workspace_root / "spack"
    ramble_location = workspace_root / "ramble"

    spack_exe = spack_location / "bin" / "spack"
    ramble_exe = ramble_location / "bin" / "ramble"
    spack_cache_location = spack_location / "misc-cache"

    if not spack_location.exists():
        print(f"Cloning spack into {spack_location}")
        run_command(
            "git clone --depth=1 -c feature.manyFiles=true "
            "https://github.com/spack/spack.git "
            f"{spack_location}"
        )

        env = {"SPACK_DISABLE_LOCAL_CONFIG": "1"}
        run_command(
            f"{spack_exe} config --scope=site add config:misc_cache:{spack_cache_location}",
            env=env,
        )
        run_command(f"{spack_exe} repo add --scope=site {source_dir}/repo", env=env)

    if not ramble_location.exists():
        print(f"Cloning ramble into {ramble_location}")
        run_command(
            "git clone --depth=1 -c feature.manyFiles=true "
            "https://github.com/GoogleCloudPlatform/ramble.git "
            f"{ramble_location}"
        )

        run_command(f"{ramble_exe} repo add --scope=site {source_dir}/repo")

    instructions = f"""\
To complete the benchpark setup, do the following:

    cd {workspace_dir}/workspace

    . {spack_location}/share/spack/setup-env.sh
    . {ramble_location}/share/ramble/setup-env.sh

    export SPACK_DISABLE_LOCAL_CONFIG=1

Further steps are needed to build the experiments (ramble -P -D . workspace setup) and run them (ramble -P -D . on)
"""
    print(instructions)


if __name__ == "__main__":
    main()
